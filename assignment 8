1.def minimumDeleteSum(s1, s2):
    m, n = len(s1), len(s2)

    # Create a 2D table to store the intermediate results
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    # Calculate the cumulative ASCII sum for s2
    for j in range(1, n + 1):
        dp[0][j] = dp[0][j - 1] + ord(s2[j - 1])

    # Calculate the cumulative ASCII sum for s1 and find the minimum sum
    for i in range(1, m + 1):
        dp[i][0] = dp[i - 1][0] + ord(s1[i - 1])
        for j in range(1, n + 1):
            if s1[i - 1] == s2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = min(dp[i - 1][j] + ord(s1[i - 1]), dp[i][j - 1] + ord(s2[j - 1]))

    return dp[m][n]
s1 = "sea"
s2 = "eat"
result = minimumDeleteSum(s1, s2)
print("Lowest ASCII sum of deleted characters:", result)
#output =Lowest ASCII sum of deleted characters: 231
​

2.def checkValidString(s):
    stack = []
    star_stack = []

    for i, ch in enumerate(s):
        if ch == '(':
            stack.append(i)
        elif ch == '*':
            star_stack.append(i)
        else:
            if stack:
                stack.pop()
            elif star_stack:
                star_stack.pop()
            else:
                return False

    while stack and star_stack:
        if stack[-1] > star_stack[-1]:
            return False
        stack.pop()
        star_stack.pop()

    return len(stack) == 0

s = "()"
result = checkValidString(s)
print(result)
#output=True


3.def minDistance(word1, word2):
    m, n = len(word1), len(word2)

    # Create a 2D table to store the intermediate results
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    # Fill in the table with the minimum number of steps
    for i in range(m + 1):
        for j in range(n + 1):
            if i == 0:
                dp[i][j] = j
            elif j == 0:
                dp[i][j] = i
            elif word1[i - 1] == word2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])

    return dp[m][n]

word1 = "sea"
word2 = "eat"
result = minDistance(word1, word2)
print("Minimum number of steps:", result)

#output= Minimum number of steps: 2


4.class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


def str2tree(s):
    if not s:
        return None

    # Find the value of the root node
    val = ""
    i = 0
    while i < len(s) and s[i] != '(':
        val += s[i]
        i += 1
    root = TreeNode(int(val))

    # Find the substring for the left child and right child
    count = 0
    start = i
    while i < len(s):
        if s[i] == '(':
            count += 1
        elif s[i] == ')':
            count -= 1
        if count == 0:
            break
        i += 1

    # Recursively construct the left child and right child
    if start + 1 < i:
        root.left = str2tree(s[start + 1:i])
    if i + 2 < len(s):
        root.right = str2tree(s[i + 2:len(s) - 1])

    return root


def inorderTraversal(root):
    if not root:
        return []
    return inorderTraversal(root.left) + [root.val] + inorderTraversal(root.right)

​s = "4(2(3)(1))(6(5))"
root = str2tree(s)
result = inorderTraversal(root)
print(result)
#output=[4,2,3,1,6,5]


5. def compress(chars):
    n = len(chars)
    if n <= 1:
        return n

    write = 0
    count = 1

    for i in range(1, n):
        if chars[i] == chars[i - 1]:
            count += 1
        else:
            chars[write] = chars[i - 1]
            write += 1
            if count > 1:
                for digit in str(count):
                    chars[write] = digit
                    write += 1
            count = 1

    chars[write] = chars[n - 1]
    write += 1
    if count > 1:
        for digit in str(count):
            chars[write] = digit
            write += 1

    return write
chars = ["a", "a", "b", "b", "c", "c", "c"]
length = compress(chars)
print("New length:", length)
print("Modified chars:", chars[:length])

#output= New length: 6
Modified chars: ['a', '2', 'b', '2', 'c', '3']


6.from collections import Counter

def findAnagrams(s, p):
    result = []
    n = len(s)
    m = len(p)

    if n < m:
        return result

    # Count the frequencies of characters in p
    p_freq = Counter(p)

    # Initialize the sliding window
    window = Counter(s[:m])

    # Check if the first window is an anagram of p
    if window == p_freq:
        result.append(0)

    # Slide the window over the remaining characters of s
    for i in range(m, n):
        # Add the current character to the window
        window[s[i]] += 1

        # Remove the leftmost character from the window
        if window[s[i - m]] == 1:
            del window[s[i - m]]
        else:
            window[s[i - m]] -= 1

        # Check if the current window is an anagram of p
        if window == p_freq:
            result.append(i - m + 1)

    return result

s = "cbaebabacd"
p = "abc"
indices = findAnagrams(s, p)
print(indices)

#output= [0, 6]


